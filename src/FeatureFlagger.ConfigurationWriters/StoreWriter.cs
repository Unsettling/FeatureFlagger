namespace FeatureFlagger.ConfigurationWriters
{
    using System.Composition;
    using System.Configuration;
    using System.Data.SqlClient;
    using System.Text;

    using Feature = Domain.Feature;

    [Export(typeof(IConfigurationWriter))]
    [ExportMetadata("Writer", Constants.Store)]
    public class StoreWriter : IConfigurationWriter
    {
        private readonly string connectionString;

        [ImportingConstructor]
        public StoreWriter()
        {
            this.connectionString = ConfigurationManager.ConnectionStrings["FeatureFlagger"].ConnectionString;
        }

        public void Create(Feature feature)
        {
            this.CreateFeature(feature);

            // TODO: cyclic dependency?
            // FeatureFlagger.SetFeatures();
        }

        public void Delete(string featureName)
        {
            this.DeleteFeature(featureName);

            // TODO: cyclic dependency?
            // FeatureFlagger.SetFeatures();
        }

        public void Update(Feature feature)
        {
            // Rather than struggling through a bunch of UPDATE statements in a
            // transaction with everything generated by a couple of foreach loops
            // let's just delete and use our insert method.

            // Also, if the user wanted to change the Feature.Name then we'd
            // need to delete the old one and create a new one as we don't use
            // the Id for the lookup and the Name is immutable/indexed/unique.

            this.DeleteFeature(feature.Name);
            this.CreateFeature(feature);

            // TODO: cyclic dependency?
            // FeatureFlagger.SetFeatures();
        }

        private void CreateFeature(Feature feature)
        {
            var sql = new StringBuilder();
            sql.AppendLine("DECLARE @FeatureIdTable table (Id int)");
            sql.AppendLine("DECLARE @FlagIdTable table (Id int)");
            sql.AppendLine("DECLARE @Id int");
            sql.AppendLine(
                $"INSERT Features (Name, Description) OUTPUT INSERTED.Id INTO @FeatureIdTable(Id) VALUES ('{feature.Name}', '{feature.Description}');");

            foreach (var flag in feature.Flags)
            {
                sql.AppendLine("SELECT @Id = Id FROM @FeatureIdTable;");
                sql.AppendLine(
                    $"INSERT Flags (Name, FeatureId) OUTPUT INSERTED.Id INTO @FlagIdTable(Id) VALUES ('{flag.Name}', @Id);");

                foreach (var pair in flag.Properties)
                {
                    sql.AppendLine("SELECT @Id = Id FROM @FlagIdTable;");
                    sql.AppendLine(
                        $"INSERT FlagProperties (PropertyKey, PropertyValue, FlagId) VALUES ('{pair.Key}', '{pair.Value}', @Id);");
                }
            }

            this.ExecuteSql(sql.ToString());
        }

        private void DeleteFeature(string featureName)
        {
            this.ExecuteSql(
                $"DELETE FROM Features WHERE Features.Name = '{featureName}';");
        }

        private void ExecuteSql(string queryString)
        {
            using (var connection = new SqlConnection(this.connectionString))
            using (var command = new SqlCommand(queryString, connection))
            {
                connection.Open();
                command.ExecuteNonQuery();
            }
        }
    }
}